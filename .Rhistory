library(plyr) # Data manipulation
library(tidyverse) # Data manipulation
library(mctoolsr) # Microbial analyses
library(RColorBrewer) # Colors
library(vegan) # Multivariate analyses
library(indicspecies) # Indicator species
library(car) # Stats
library(FSA) # SE
library(magrittr) # Set names
library(PMCMRplus) # Stats
library(readxl) # Excel
library(writexl) # Excel
library(plotly) # Interactive plots
library(ggmap) # Maps
library(ggsn) # Maps
library(multcomp) # Tukey HSD and significance letters
library(emmeans) # Tukey HSD and significance letters
library(scales) # View colors
library(cowplot) # Multipanels
library(qvalue) # q values for indicator species
library(reshape2) # melt
library(gridExtra) # graphs
library(grid) # graphs
library(cowplot) # graphs
library(ggpubr) # graphs
library(ggExtra) # graphs
library(ggh4x) # graphs
library(dendextend) # graphs
library(corrplot) # correlation plots
library(pheatmap) # heatmaps
library(zCompositions) # CLR
library(compositions) # Aitchison
library(mobr) # rarefaction curves
library(plotly) # interactive graphs
library(pairwiseAdonis) # pairwise permanova
library(patchwork) # insets
# Functions
find_hull <- function(df) df[chull(df$Axis01, df$Axis02),]
`%notin%` <- Negate(`%in%`)
# Guild subsetting module from other repo
source("~/Documents/GitHub/SF_microbe_methane/modules/3_OTU_subsetting_modules_v.0.4_strip.r")
# Correlation functions from other repo
source("~/Documents/GitHub/EastCoast/code/meth_corr_by_taxonomy.R")
source("~/Documents/GitHub/EastCoast/code/meth_corr_by_bgc.R")
# Plotting functions from other repo
source("~/Documents/GitHub/EastCoast/code/cliffplot_taxa_bars.R")
source("~/Documents/GitHub/Extremophilic_Fungi/code/plot_multipatt.R")
# Effect size from Jack Darcy
source("~/Documents/GitHub/Timberlake/code/effectSize.R")
# Repository path
setwd("~/Documents/GitHub/Timberlake/")
# Wyatt Hartman's guild color palette
# Note that MeOB don't exist in this dataset, so removed
# But ANME do exist in this dataset, so add
# Extra methanogen guilds added so colors added too
Guild_cols <- read.table("~/Documents/GitHub/SF_microbe_methane/data/colors/Guild_color_palette.txt",
sep='\t') %>%
dplyr::select(Guild, G_index, color) %>%
set_names(c("Guild", "Index", "color")) %>%
mutate(Index = rev(Index)) %>%
add_row(Guild = "ANME", Index = 10, color = "#836FFF") %>%
add_row(Guild = "CH4_me", Index = 16, color = "#FDC086") %>%
add_row(Guild = "CH4_mix", Index = 17, color = "#FFFF99") %>%
filter(Guild != "MeOB") %>%
filter(Guild != "Anamx") %>%
arrange(Index)
nc <- readRDS("data/nc.rds")
# Add C, N, C:N data (was received later)
nc_cn <- read_excel("~/Documents/GitHub/EastCoast/data/Copy of CHN data.xls", sheet = 2) %>%
slice(12:91) %>%
dplyr::select(Name, `%N`, `%C`, `C:N`) %>%
mutate(Name = gsub("bottom", "bot", Name)) %>%
separate(Name, into = c("ID", "Depth"), sep = " ", remove = F) %>%
mutate(Treatment = substr(ID, start = 1, stop = 1),
Hydro = substr(ID, start = 2, stop = 2),
Replicate = substr(ID, start = 3, stop = 3)) %>%
filter(Hydro == "F") %>%
mutate(Treatment = recode_factor(Treatment,
"A" = "Control",
"B" = "ASW",
"C" = "ASW_noS",
"D" = "SO4")) %>%
mutate(Treatment = factor(Treatment,
levels = c("ASW", "ASW_noS", "Control", "SO4"))) %>%
arrange(desc(Depth), Treatment) %>%
filter(Name %notin% c("BF1 top", "BF2 top", "AF1 top", "DF2 top", "BF2 bot", "CF1 bot", "AF2 bot"))
rownames(nc$map_loaded)[11:43]
nc$map_loaded$sed_per_C[11:43] <- nc_cn$`%C`
nc$map_loaded$sed_per_N[11:43] <- nc_cn$`%N`
nc$map_loaded$sed_CN[11:43] <- nc_cn$`C:N`
# After looking at microbial alpha and beta diversity it is clear SO4 5B D1 and D2 are switched!
# Fix
for (i in 1:nrow(nc$map_loaded)) {
if (nc$map_loaded$sampleID[i] == "TL_inc_d1_SO4_5B") {
nc$map_loaded$Depth[i] <- "10-15 cm"
nc$map_loaded$sampleID_clean[i] <- "+SO4_5B_D2"
}
}
for (i in 1:nrow(nc$map_loaded)) {
if (nc$map_loaded$sampleID[i] == "TL_inc_d2_SO4_5B") {
nc$map_loaded$Depth[i] <- "0-5 cm"
nc$map_loaded$sampleID_clean[i] <- "+SO4_5B_D1"
}
}
# Add +SO4 core 5 data to 5A and 5B
new_dat <- read_excel("data/Soil pH-Jessie.xls", sheet = 3, na = "NA")
# rows 25, 26, 42, 43
# columns 10 - 24
nc$map_loaded[25, 10:24] <- new_dat[1, 2:16]
nc$map_loaded[26, 10:24] <- new_dat[2, 2:16]
nc$map_loaded[42, 10:24] <- new_dat[3, 2:16]
nc$map_loaded[43, 10:24] <- new_dat[4, 2:16]
# To recap, C, N, CN, pH have 5A D1 D2, 5B D1 D2. Porewater just has 5 D1 D2. GHG just 5
# Add two new columns for SO4 and ASW (following N + P type experiments)
# There's SO4, ASW, and both (just like N, P, NP)
nc$map_loaded$SO4 <- recode_factor(nc$map_loaded$Treatment,
"+SO4" = "Sulfate",
"+ASW" = "SaltSulfate")
nc$map_loaded$SO4 <- grepl(x = nc$map_loaded$SO4, pattern = "Sulfate")
nc$map_loaded$ASW <- recode_factor(nc$map_loaded$Treatment,
"+ASW-SO4" = "Salt",
"+ASW" = "SaltSulfate")
nc$map_loaded$ASW <- grepl(x = nc$map_loaded$ASW, pattern = "Salt")
# Remove Methylotenera from MOB guild
for (i in 1:nrow(nc$taxonomy_loaded)) {
if (nc$taxonomy_loaded$taxonomy6[i] == "Methylotenera") {
nc$taxonomy_loaded$taxonomy9[i] <- "NA"
}
}
#### _SRB ####
# Need to get top SRB taxa
# Then look at cultured isolates to check salinity tolerance
nc_srb <- filter_taxa_from_input(nc,
taxa_to_keep = c("SRB", "SRB_syn"),
at_spec_level = 9)
tax_sum_srb <- summarize_taxonomy(input = nc_srb,
level = 6,
report_higher_tax = F,
relative = F) %>%
# filter(rownames(.) != "NA") %>%
mutate_all(funs((./82312)*100))
barssrb <- plot_taxa_bars(tax_sum_srb,
nc_srb$map_loaded,
"sampleID_clean",
num_taxa = 20,
data_only = TRUE) %>%
mutate(taxon = gsub("NA", "Unclassified", taxon)) %>%
mutate(taxon = fct_relevel(taxon, "Other", after = Inf)) %>%
mutate(taxon = fct_relevel(taxon, "Unclassified", after = Inf)) %>%
mutate(taxon = fct_rev(taxon)) %>%
left_join(., nc_srb$map_loaded, by = c("group_by" = "sampleID_clean"))
topsrb <- barssrb %>%
group_by(taxon) %>%
summarise(mean = mean(mean_value)) %>%
arrange(-mean)
barssrb <- barssrb %>%
mutate(taxon = factor(taxon, levels = topsrb$taxon)) %>%
mutate(taxon = fct_relevel(taxon, "Other", after = Inf)) %>%
mutate(taxon = fct_relevel(taxon, "Unclassified", after = Inf)) %>%
mutate(taxon = fct_rev(taxon))
nb.cols <- 19
mycolors <- colorRampPalette(brewer.pal(12, "Paired"))(nb.cols)
# Stats
lab <- filter_data(nc,
"Treatment",
filter_vals = "Field")
sum_gen_lab <- summarize_taxonomy(input = lab, level = 6, report_higher_tax = F)
gen_stats_lab <- taxa_summary_by_sample_type(sum_gen_lab,
lab$map_loaded,
type_header = 'Treatment',
filter_level = 0,
test_type = 'KW') %>%
filter(rownames(.) %in% barssrb$taxon) %>%
arrange(desc(rownames(.))) %>%
mutate(Pfdr = p.adjust(pvals, method = "fdr")) %>%
mutate(Sig = ifelse(Pfdr < 0.05, "Pfdr < 0.05", "Pfdr > 0.05")) %>%
mutate(Star = ifelse(Pfdr < 0.05, "*", "")) %>%
rownames_to_column(var = "taxon") %>%
arrange(match(taxon, levels(barssrb$taxon))) %>%
mutate(StarLab = paste(taxon, Star, sep = " "))
statssrb <- barssrb %>%
left_join(., gen_stats_lab, by = "taxon") %>%
mutate(StarLab = ifelse(is.na(StarLab), taxon, StarLab)) %>%
mutate(taxon = fct_relevel(taxon, "Other", after = Inf)) %>%
mutate(taxon = fct_relevel(taxon, "Unclassified", after = Inf)) %>%
mutate(taxon = fct_rev(taxon)) %>%
group_by(taxon) %>%
slice_head(n = 1)
stats_lab <- data.frame(taxon = levels(barssrb$taxon)) %>%
left_join(., statssrb, by = "taxon")
ggplot(barssrb, aes(group_by, mean_value, fill = taxon)) +
geom_bar(stat = "identity", colour = NA, size = 0.25) +
labs(x = "Sample", y = "% Abundance", fill = "Genus") +
scale_fill_manual(values = c("grey75", "grey90", mycolors),
labels = stats_lab$StarLab) +
scale_y_continuous(expand = c(0.01, 0.01)) +
facet_nested(~ Treatment + Depth, space = "free", scales = "free_x") +
guides(fill = guide_legend(ncol = 1)) +
theme_classic() +
theme(axis.title.y = element_text(face = "bold", size = 12),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 8, angle = 90, vjust = 0.5, hjust = 1),
axis.ticks.x = element_blank(),
strip.text = element_text(size = 7),
strip.background = element_rect(size = 0.2),
axis.line.y = element_blank(),
legend.position = c(1,1),
legend.justification = c(1,1),
legend.background = element_blank(),
legend.key.size = unit(0.3, "cm"),
panel.spacing.x = unit(c(0.25, 0.5, 0.25, 0.5, 0.25, 0.5, 0.25, 0.5, 0.25), "lines"))
ggplot(barssrb, aes(group_by, mean_value, fill = taxon)) +
geom_bar(stat = "identity", colour = NA, size = 0.25) +
labs(x = "Sample", y = "% Abundance", fill = "Genus") +
scale_fill_manual(values = c("grey75", "grey90", mycolors),
labels = stats_lab$StarLab) +
scale_y_continuous(expand = c(0.01, 0.01)) +
facet_nested(~ Treatment + Depth, space = "free", scales = "free_x") +
guides(fill = guide_legend(ncol = 1)) +
theme_classic() +
theme(axis.title.y = element_text(face = "bold", size = 12),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 8, angle = 90, vjust = 0.5, hjust = 1),
axis.ticks.x = element_blank(),
strip.text = element_text(size = 7),
strip.background = element_rect(size = 0.2),
axis.line.y = element_blank(),
legend.position = c(0.1,1),
legend.justification = c(1,1),
legend.background = element_blank(),
legend.key.size = unit(0.3, "cm"),
panel.spacing.x = unit(c(0.25, 0.5, 0.25, 0.5, 0.25, 0.5, 0.25, 0.5, 0.25), "lines"))
ggplot(barssrb, aes(group_by, mean_value, fill = taxon)) +
geom_bar(stat = "identity", colour = NA, size = 0.25) +
labs(x = "Sample", y = "% Abundance", fill = "Genus") +
scale_fill_manual(values = c("grey75", "grey90", mycolors),
labels = stats_lab$StarLab) +
scale_y_continuous(expand = c(0.01, 0.01)) +
facet_nested(~ Treatment + Depth, space = "free", scales = "free_x") +
guides(fill = guide_legend(ncol = 1)) +
theme_classic() +
theme(axis.title.y = element_text(face = "bold", size = 12),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 8, angle = 90, vjust = 0.5, hjust = 1),
axis.ticks.x = element_blank(),
strip.text = element_text(size = 7),
strip.background = element_rect(size = 0.2),
axis.line.y = element_blank(),
legend.position = c(0,1),
legend.justification = c(0,1),
legend.background = element_blank(),
legend.key.size = unit(0.3, "cm"),
panel.spacing.x = unit(c(0.25, 0.5, 0.25, 0.5, 0.25, 0.5, 0.25, 0.5, 0.25), "lines"))
View(topsrb)
