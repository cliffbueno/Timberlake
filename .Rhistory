library(phyloseq)
library(plyr)
library(tidyverse)
library(RColorBrewer)
library(stringr)
library(scales)
library(cowplot)
library(plotly)
suppressMessages(library(vegan))
suppressMessages(library(DESeq2))
suppressMessages(library(gplots))
library(pheatmap)
library(reshape2)
library(readxl)
setwd("~/Documents/GitHub/Timberlake/")
# Functions
find_hull <- function(df) df[chull(df$Axis01, df$Axis02),]
find_hullj <- function(df) df[chull(df$Axis01j, df$Axis02j),]
# Import and pre-process files
## KO table import, filter out field samples
TL_KO_raw <- read.csv("data/Timberlake_MG_KO_data.csv", header=TRUE) %>%
select(1:19, Fxn)
# Check pmoABC trends (this was an issue in SF Salinity Gradient)
checkPMO <- TL_KO_raw %>%
select(-Fxn) %>%
column_to_rownames(var = "KO") %>%
t() %>%
as.data.frame() %>%
select(K10944, K10945, K10946)
ggplot(checkPMO, aes(K10944, K10945)) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +
geom_point() +
geom_smooth(method = "lm", alpha = 0.2) +
labs(x = "pmoA", y = "pmoB") +
theme_classic()
ggplot(checkPMO, aes(K10944, K10946)) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +
geom_point() +
geom_smooth(method = "lm", alpha = 0.2) +
labs(x = "pmoA", y = "pmoC") +
theme_classic()
ggplot(checkPMO, aes(K10945, K10946)) +
geom_abline(intercept = 0, slope = 1, linetype = "dotted") +
geom_point() +
geom_smooth(method = "lm", alpha = 0.2) +
labs(x = "pmoB", y = "pmoC") +
theme_classic()
hist(checkPMO$K10944)
hist(checkPMO$K10945)
hist(checkPMO$K10946)
checkPMO_long <- melt(checkPMO, measure.vars = c("K10944", "K10945", "K10946"))
ggplot(checkPMO_long, aes(x = value, colour = variable)) +
geom_density() +
labs(x = "Count", y = "Density", colour = "KO") +
theme_classic()
# df of KO gene fxns
TL_KO_fxn <- TL_KO_raw %>%
select(KO, Fxn) %>%
column_to_rownames(var = "KO")
# KO fxns as Phyloseq object
suppressWarnings(KOTaxTable <- tax_table(TL_KO_fxn)) # Fxn as PHYLOSEQ tax table
colnames(KOTaxTable) <- colnames(TL_KO_fxn) # Add back colnames
row.names(KOTaxTable) <- row.names(TL_KO_fxn) # Add back rownames
# Gene Ontology and fxn Colors import
BGC_ont <- read.csv("data/Ontology_KO_CNPSch4_Fm_whh.csv", header=TRUE) # Ontology
BGC_colors <- read.csv("data/Ontol_KO_L2_Color_KEY_whh.csv") # Colors
BGC_ont_col <- merge(BGC_ont, BGC_colors, by = "L2", all.x =TRUE) %>% # Merge
arrange(Index.x) %>% # Sort for readability
filter(L2 != "Fermentation") # Drop fermentation
# Only CNPSch4 genes from Ontology
bgc_KOu <- unique(data.frame(KO = BGC_ont$KO)) # only KOs from BGC_ont
TL_bgc_KO <- merge(bgc_KOu, TL_KO_raw) # Merge with TL KO
# Sample Mapping import
map_MG_only <- read.table("data/Timberlake_sample_map_both.txt", sep="\t", header = T) %>%
drop_na(MG_name) %>% # drop NA in MG samps
arrange(itag_meta_order2) %>% # sort by index (itag intentional)
select(MG_name, Treat, Depth) %>% # keep only relevant cols
column_to_rownames(var = "MG_name") %>% # Sample as row names, # Drop sample col
filter(Treat != "SourceSoil") # Drop field samples, incubations only
## Phyloseq to DESeq2
# Prep KO count data for OTU table
No_fxn <- data.frame(unique(TL_KO_raw)) %>% # DF for KOin, unique used to drop redund.
column_to_rownames(var = "KO") %>% # Make rownames KO numbers, Drop KO column
select(-Fxn) %>% # Drop Fxn
as.matrix()
# Make PHYLOSEQ KO -> "OTU Table"
class(No_fxn) <- "numeric" # Make numeric for phyloseq
KO_otu <- otu_table(No_fxn, taxa_are_rows = TRUE, errorIfNULL = TRUE) # Make OTU table phyloseq object
# Make Phyloseq sample data
Map <- sample_data(map_MG_only) # map
### Make combined Phyloseq OBJECT
physeq = phyloseq(KO_otu, Map, KOTaxTable)
# phyloseq patch before DESeq
sample_data(physeq)$Treat <- relevel(as.factor(get_variable(physeq, "Treat")),
ref="Control")
# Export phyloseq to DESeq
KO_phy2des <- phyloseq_to_deseq2(physeq, ~ Treat)
## DESeq2 for Diff abund
# Wald test
KO_phy2des <- DESeq(KO_phy2des,
test = "Wald",
fitType = "parametric") # Test
# Inspect DESeq fmt data set, includes estimated dispersions
KO_phy2des
# Overall results  -- why nothing sig when contrasts are?
res <- results(KO_phy2des)
resultsNames(KO_phy2des)
summary(res)
plotMA(res)
# Likelihood ratio test, "ANOVA - like" for multiple factors
# Note here some are sig again, unlike above Wald test
lrt <- DESeq(KO_phy2des,
test = "LRT",
reduced = ~1)
res_LRT <- results(lrt)
res_LRT
plotMA(res_LRT)
#### 2. DESeq2 Linear contrasts ####
### Function for linear contrasts with p > filter, FC cutoff
# Function for linear contrasts, results cutoff and merge with Ontology
DSq_cntrstF = function(Treat_col, Treat1, Treat2) {                      # Treat_col: column with treatment data
alpha = 0.05                                                         # Treat1: for increase compared with Ref
FC = 1                                                               # Treat2: Ref for comparison
T1_T2_De <- results(KO_phy2des,
contrast = c(Treat_col, Treat1, Treat2),
independentFiltering = FALSE) # DESeq2 results
T1_T2_DeS <- T1_T2_De[which(T1_T2_De$padj < alpha), ]                # filter by alpha
T1_T2_DeSQ <- data.frame(T1_T2_DeS)                                   # make df
T1_T2_DeSQ$KO <- row.names(T1_T2_DeSQ)                                # add KO as rownames
# Merge with CNP ontology, filter FC > 1
T1_T2_DeSQ <- merge(T1_T2_DeSQ, BGC_ont_col, by ='KO')               # merge w Ontology
T1_T2_DeSQ_FC1 <- T1_T2_DeSQ[abs(T1_T2_DeSQ$log2FoldChange) > FC,]   # filter FC > 1
return(T1_T2_DeSQ_FC1)
}
# Test contrasts fxn:
ASW_Ctrl_DeSQ_FC <- DSq_cntrstF("Treat", "ASW", "Control")
# Create ALL Contrasts results sets
ASW_Ctrl_FC <- DSq_cntrstF("Treat", "ASW", "Control")
ASW0S_Ctrl_FC <- DSq_cntrstF("Treat", "ASW_noS", "Control")
SO4_Ctrl_FC <- DSq_cntrstF("Treat", "SO4", "Control")
ASW_SO4_FC <- DSq_cntrstF("Treat", "ASW", "SO4")
ASW_ASW0S_FC <- DSq_cntrstF("Treat","ASW", "ASW_noS")
ASW0S_SO4_FC <- DSq_cntrstF("Treat","ASW_noS","SO4")
### Collect significnant KOs, all treats
# gather KO lists
ASW_Ctrl_KO <- data.frame(KO = ASW_Ctrl_FC$KO)
ASW0S_Ctrl_KO <- data.frame(KO = ASW0S_Ctrl_FC$KO)
SO4_Ctrl_KO <- data.frame(KO = SO4_Ctrl_FC$KO)
ASW_SO4_KO <- data.frame(KO = ASW_SO4_FC$KO)
ASW_ASW0S_KO <- data.frame(KO = ASW_ASW0S_FC$KO)
ASW0S_SO4_KO <- data.frame(KO = ASW0S_SO4_FC$KO)
# Combine lists, make unique
Resp_KO <- (rbind(ASW_Ctrl_KO, ASW0S_Ctrl_KO, SO4_Ctrl_KO, ASW_SO4_KO, ASW_ASW0S_KO, ASW0S_SO4_KO))
Resp_KOu <- unique(Resp_KO)
row.names(Resp_KOu) <- Resp_KOu$KO
View(Resp_KOu)
res_LRT
View(res_LRT$padj)
res_LRT_df <- as.data.frame(res_LRT$padj)
View(res_LRT_df)
View(res_LRT$baseMean)
View(KO_otu)
# Store to check later
res_LRT_df <- as.data.frame(res_LRT$padj) %>%
mutate(KO = rownames(KO_otu))
#### 12. Salt Tolerance ####
salt_orig <- read_excel("~/Desktop/Methanolobus/SaltGenes.xlsx") %>%
filter(KO != "NA") %>%
mutate(Type = as.factor(Type),
Solute = as.factor(Solute)) %>%
group_by(KO) %>%
slice_head(n = 1)
salt_orig$Order[28] <- 66.5 # Fix glutamine order
KO_table <- KO_VST_CPM %>% # DESeq + CPM normalized KO table
select(-KO) %>%
mutate(sum = rowSums(.)) %>% # Get row sums
filter(sum > 0) %>% # Remove zeroes
mutate(KO = rownames(.)) %>%
select(-sum)
names(res_LRT_df)
#### 12. Salt Tolerance ####
res_LRT_df_sig <- subset(res_LRT_df, res_LRT$padj < 0.05)
salt_sig <- read_excel("~/Desktop/Methanolobus/SaltGenes.xlsx") %>%
filter(KO != "NA") %>%
mutate(Type = as.factor(Type),
Solute = as.factor(Solute)) %>%
group_by(KO) %>%
slice_head(n = 1) %>%
filter(KO %in% res_LRT_df_sig$KO)
View(salt_sig)
