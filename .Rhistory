# Repository path
setwd("~/Documents/GitHub/Timberlake/")
# Start here
nc <- readRDS("data/nc.rds")
library(plyr) # Data manipulation
library(tidyverse) # Data manipulation
library(mctoolsr) # Microbial analyses
library(RColorBrewer) # Colors
library(vegan) # Multivariate analyses
library(indicspecies) # Indicator species
library(car) # Stats
library(FSA) # SE
library(magrittr) # Set names
library(PMCMRplus) # Stats
library(readxl) # Excel
library(writexl) # Excel
library(plotly) # Interactive plots
library(ggmap) # Maps
library(ggsn) # Maps
library(multcomp) # Tukey HSD and significance letters
library(emmeans) # Tukey HSD and significance letters
library(scales) # View colors
library(cowplot) # Multipanels
library(qvalue) # q values for indicator species
library(reshape2) # melt
library(gridExtra) # graphs
library(grid) # graphs
library(cowplot) # graphs
library(ggpubr) # graphs
library(ggExtra) # graphs
library(ggh4x) # graphs
library(dendextend) # graphs
library(corrplot) # correlation plots
library(pheatmap) # heatmaps
library(zCompositions) # CLR
library(compositions) # Aitchison
# Functions
find_hull <- function(df) df[chull(df$Axis01, df$Axis02),]
`%notin%` <- Negate(`%in%`)
# Guild subsetting module from other repo
source("~/Documents/GitHub/SF_microbe_methane/modules/3_OTU_subsetting_modules_v.0.4_strip.r")
paste_ranks = function(sm_taxa){
k = data.frame(k ="k_", sm_taxa['taxonomy1'])
k2 <- do.call(paste, c(k, sep = ""))
p = data.frame(k ="p_", sm_taxa['taxonomy2'])
p2 <- do.call(paste, c(p, sep = ""))
c = data.frame(k ="c_", sm_taxa['taxonomy3'])
c2 <- do.call(paste, c(c, sep = ""))
o = data.frame(k ="o_", sm_taxa['taxonomy4'])
o2 <- do.call(paste, c(o, sep = ""))
f = data.frame(k ="f_", sm_taxa['taxonomy5'])
f2 <- do.call(paste, c(f, sep = ""))
g = data.frame(k ="g_", sm_taxa['taxonomy6'])
g2 <- do.call(paste, c(g, sep = ""))
# NOT USING SPECIES HERE! OTU preprocessing doesn't!
s = data.frame(k ="s_", sm_taxa['taxonomy7'])
s2 <- do.call(paste, c(s, sep = ""))
# combine all
lineage_df = data.frame(k2, p2, c2, o2, f2, g2)
lineage = do.call(paste, c(lineage_df, sep = ';'))
return(lineage)
}
# Correlation functions from other repo
source("~/Documents/GitHub/EastCoast/meth_corr_by_taxonomy.R")
source("~/Documents/GitHub/EastCoast/meth_corr_by_bgc.R")
# Plotting functions from other repo
source("~/Documents/GitHub/EastCoast/cliffplot_taxa_bars.R")
source("~/Documents/GitHub/Extremophilic_Fungi/plot_multipatt.R")
# Repository path
setwd("~/Documents/GitHub/Timberlake/")
# Wyatt Hartman's guild color palette
# Note that MeOB, ANME, Anamx don't exist in this dataset, so removed
# Extra methanogen guilds added so colors added too
Guild_cols <- read.table("~/Documents/GitHub/SF_microbe_methane/data/colors/Guild_color_palette.txt",
sep='\t') %>%
dplyr::select(Guild, G_index, color) %>%
set_names(c("Guild", "Index", "color")) %>%
mutate(Index = rev(Index)) %>%
#add_row(Guild = "ANME", Index = 10, color = "#836FFF") %>%
add_row(Guild = "CH4_me", Index = 15, color = "#FDC086") %>%
add_row(Guild = "CH4_mix", Index = 16, color = "#FFFF99") %>%
filter(Guild != "MeOB") %>%
filter(Guild != "ANME") %>%
filter(Guild != "Anamx") %>%
arrange(Index)
# Prepare data. Only need to do once. Then skip to start here
# Need to make mctoolsr object from the merged mTAGs output
# Input file and reformat everything
# Separate euks and proks
p <- read.delim("data/merged_profile.otu.tsv") %>%
set_names(substr(names(.), 1, nchar(names(.))-5)) %>%
rename(taxonomy = X.ta) %>%
filter(., !grepl("Eukaryota", taxonomy)) %>%
mutate(taxonomy = gsub("root__Root;", "", taxonomy)) %>%
mutate(taxonomy = gsub("domain__", "", taxonomy)) %>%
mutate(taxonomy = gsub("phylum__", "", taxonomy)) %>%
mutate(taxonomy = gsub("class__", "", taxonomy)) %>%
mutate(taxonomy = gsub("order__", "", taxonomy)) %>%
mutate(taxonomy = gsub("family__", "", taxonomy)) %>%
mutate(taxonomy = gsub("genus__", "", taxonomy)) %>%
mutate(taxonomy = gsub("otu__", "", taxonomy)) %>%
mutate(taxonomy = gsub("silva_138_complink_cons_", "", taxonomy)) %>%
mutate(taxonomy = gsub("unknown", "NA", taxonomy)) %>%
mutate(taxonomy = gsub("otu_", "NA;otu_", taxonomy)) %>%
filter(taxonomy != "Unassigned") %>%
filter(taxonomy != "Unaligned") %>%
separate(taxonomy, into = c("a","s","d","f","g","h","j","otu"), remove = F, sep = ";") %>%
dplyr::select(-c(a,s,d,f,g,h,j)) %>%
dplyr::select(otu, everything()) %>%
dplyr::select(-taxonomy, taxonomy)
names(p) <- gsub("ASW.", "ASW_", names(p))
names(p) <- gsub("Control", "Control_", names(p))
names(p) <- gsub("Field", "Field_", names(p))
e <- read.delim("data/merged_profile.otu.tsv") %>%
set_names(substr(names(.), 1, nchar(names(.))-5)) %>%
rename(taxonomy = X.ta) %>%
filter(., grepl("Eukaryota", taxonomy)) %>%
mutate(taxonomy = gsub("root__Root;", "", taxonomy)) %>%
mutate(taxonomy = gsub("domain__", "", taxonomy)) %>%
mutate(taxonomy = gsub("phylum__", "", taxonomy)) %>%
mutate(taxonomy = gsub("class__", "", taxonomy)) %>%
mutate(taxonomy = gsub("order__", "", taxonomy)) %>%
mutate(taxonomy = gsub("family__", "", taxonomy)) %>%
mutate(taxonomy = gsub("genus__", "", taxonomy)) %>%
mutate(taxonomy = gsub("otu__", "", taxonomy)) %>%
mutate(taxonomy = gsub("silva_138_complink_cons_", "", taxonomy)) %>%
mutate(taxonomy = gsub("unknown", "NA", taxonomy)) %>%
mutate(taxonomy = gsub("otu_", "NA;otu_", taxonomy)) %>%
filter(taxonomy != "Unassigned") %>%
filter(taxonomy != "Unaligned") %>%
separate(taxonomy, into = c("a","s","d","f","g","h","j","otu"), remove = F, sep = ";") %>%
dplyr::select(-c(a,s,d,f,g,h,j)) %>%
dplyr::select(otu, everything()) %>%
dplyr::select(-taxonomy, taxonomy)
names(e) <- gsub("ASW.", "ASW_", names(e))
names(e) <- gsub("Control", "Control_", names(e))
names(e) <- gsub("Field", "Field_", names(e))
# Sequencing info
mtag_output <- read.delim("data/merged_profile.otu.tsv") %>%
set_names(substr(names(.), 1, nchar(names(.))-5)) %>%
rename(taxonomy = X.ta)
mtag_output_t <- mtag_output %>%
column_to_rownames(var = "taxonomy") %>%
t() %>%
as.data.frame()
depth_info <- data.frame("Bacteria+Archaea" = colSums(p[,2:24]),
"Eukaryota" = colSums(e[,2:24]),
#"Classified" = colSums(mtag_output[1:10316, 2:24]),
"Unclassified" = mtag_output_t$Unassigned,
"Unaligned" = mtag_output_t$Unaligned,
"Treatment" = c(rep("ASW-SO4", 3),
rep("ASW", 5),
rep("Control", 5),
rep("Field", 5),
rep("SO4", 5))) %>%
mutate(sampleID = rownames(.)) %>%
mutate(sampleID = gsub("ASW.", "ASW_", sampleID)) %>%
mutate(sampleID = gsub("Control", "Control_", sampleID)) %>%
mutate(sampleID = gsub("Field", "Field_", sampleID)) %>%
mutate(Treatment = factor(Treatment, levels = c("Field", "Control", "SO4", "ASW-SO4", "ASW")))
mean(depth_info$Bacteria.Archaea)
mean(depth_info$Eukaryota)
mean(depth_info$Unclassified)
mean(depth_info$Unaligned)
depth_info_rel <- depth_info %>%
mutate(Total = Bacteria.Archaea + Eukaryota + Unclassified + Unaligned) %>%
mutate(BacArcRel = round(Bacteria.Archaea/Total*100, digits = 2),
EukRel = round(Eukaryota/Total*100, digits = 2))
depth_info_long <- melt(depth_info, id.vars = c("sampleID", "Treatment"))
ggplot(depth_info_long, aes(sampleID, value, fill = variable)) +
geom_bar(stat = "identity") +
labs(x = NULL,
y = "Reads",
fill = "Type") +
facet_grid(~ Treatment, space = "free", scales = "free_x") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# iTags (to compare). Also make mapping file for mTAGs.
# NB: Metagenomes are from D2!
# NB: Use Wyatt's mapping file
nc <- readRDS("data/nc.rds")
wyatt_map <- read.delim("data/Timberlake_sample_map_both.txt") %>%
dplyr::select(Itag_sample, MG_name) %>%
filter(., !grepl("d1", Itag_sample))
wyatt_map <- wyatt_map[rowSums(is.na(wyatt_map)) != ncol(wyatt_map),]
mTAGs_map <- nc$map_loaded %>%
filter(Depth == "10-15 cm") %>%
dplyr::select(1:3, 10:24) %>%
full_join(., wyatt_map, by = c("sampleID" = "Itag_sample")) %>%
arrange(MG_name) %>%
drop_na(MG_name) %>%
dplyr::select(MG_name, everything()) %>%
dplyr::select(-Treatment, -sampleID) %>%
mutate(MG_name = gsub("SourceSoil", "Field", MG_name)) %>%
left_join(., depth_info, by = c("MG_name" = "sampleID")) %>%
dplyr::select(-Classified, -Unclassified, -Unaligned) %>%
dplyr::select(MG_name, Treatment, everything())
View(wyatt_map)
# Import Data (n = 23), Filter, Rarefy, Calc richness
tax_table_fp <- "data/seqtab_wTax_mctoolsr_mtagProk.txt"
map_fp <- "data/mtags_metadata.txt"
input = load_taxa_table(tax_table_fp, map_fp)
# Filter chloroplast, mitochondria, eukaryotes, unassigned at domain
input_filt <- filter_taxa_from_input(input,
taxa_to_remove = "Chloroplast") # 13 removed
input_filt <- filter_taxa_from_input(input_filt,
taxa_to_remove = "Mitochondria") # 23 removed
input_filt <- filter_taxa_from_input(input_filt,
taxa_to_remove = "Eukaryota") # none
# (those were already filtered)
input_filt <- filter_taxa_from_input(input_filt,
taxa_to_remove = "NA",
at_spec_level = 1) # none
View(input_filt$data_loaded)
# Remove singletons and doubletons
singdoub <- data.frame("count" = rowSums(input_filt$data_loaded)) %>%
filter(count < 3) %>%
mutate(ASV = rownames(.))
input_filt <- filter_taxa_from_input(input_filt,
taxa_IDs_to_remove = singdoub$ASV)
View(input_filt$data_loaded)
# Start here
nc <- readRDS("input_filt_rare_mTAGs.rds")
# Start here
nc <- readRDS("data/input_filt_rare_mTAGs.rds")
nc$map_loaded <- nc$map_loaded %>%
mutate("Treatment" = c(rep("+ASW-SO4", 3),
rep("+ASW", 5),
rep("Control", 5),
rep("Field", 5),
rep("+SO4", 5))) %>%
mutate(Treatment = factor(Treatment, levels = c("Field", "Control", "+SO4", "+ASW-SO4", "+ASW")))
nc$map_loaded$sampleID <- rownames(nc$map_loaded)
nc$map_loaded$sampleID[5] <- "TL_inc_d2_ASW_2"
nc$map_loaded$sampleID[10] <- "TL_inc_d2_DI_ctrl_2"
#### 4. Beta ####
# Get env. vars with no NA
env_nc <- nc$map_loaded %>%
dplyr::select(3:17)
env_nona_nc <- na.omit(env_nc)
nrow(env_nona_nc) # n = 14
#### _Aitch ####
# Use non-rarefied data, do CLR transformation, Aitchison, PCA
sum(rownames(nc$map_loaded) != rownames(input_filt$map_loaded))
input_filt$map_loaded <- nc$map_loaded
dim(input_filt$data_loaded)
# CLT transformation
otu_czm <- cmultRepl(t((input_filt$data_loaded)), label = 0, method = "CZM")
otu_clr <- clr(otu_czm)
aclr <- compositions::dist(otu_clr)
set.seed(1150)
adonis2(aclr ~ nc$map_loaded$Treatment + nc$map_loaded$Depth) # Both sig
set.seed(1150)
adonis2(aclr ~ nc$map_loaded$Treatment) # Both sig
anova(betadisper(aclr, nc$map_loaded$Treatment)) # Dispersion homogeneous
# PCA with vectors
d.pcx <- prcomp(aclr)
set.seed(100)
ef_nc <- envfit(d.pcx, env_nc, permutations = 999, na.rm = TRUE)
ef_nc
ordiplot(d.pcx)
plot(ef_nc, p.max = 0.075, cex = 0.5)
manual_factor_nc <- 0.3
vec.df_nc <- as.data.frame(ef_nc$vectors$arrows*sqrt(ef_nc$vectors$r)) %>%
mutate(PC1 = PC1 * manual_factor_nc,
PC2 = PC2 * manual_factor_nc) %>%
mutate(variables = rownames(.)) %>%
filter(ef_nc$vectors$pvals < 0.075) %>%
filter(variables != "Cl_mgL") %>%
mutate(shortnames = c("Salinity", "N2O", "CO2", "NH4", "pH", "Br"))
d.mvar <- sum(d.pcx$sdev^2)
PC1 <- paste("PC1: ", round((sum(d.pcx$sdev[1]^2)/d.mvar)*100, 1), "%")
PC2 <- paste("PC2: ", round((sum(d.pcx$sdev[2]^2)/d.mvar)*100, 1), "%")
nc$map_loaded$Axis01 <- d.pcx$rotation[,1]
nc$map_loaded$Axis02 <- d.pcx$rotation[,2]
micro.hulls <- ddply(nc$map_loaded, c("Treatment"), find_hull)
ggplot(nc$map_loaded, aes(-Axis01, Axis02)) +
geom_polygon(data = micro.hulls,
aes(colour = Treatment, fill = Treatment),
alpha = 0.1, show.legend = F) +
geom_point(size = 3, alpha = 1, aes(colour = Treatment, shape = Depth)) +
geom_segment(data = vec.df_nc,
aes(x = 0, xend = PC1, y = 0, yend = -PC2),
arrow = arrow(length = unit(0.35, "cm")),
colour = "gray", alpha = 0.6,
inherit.aes = FALSE) +
geom_text(data = vec.df_nc,
aes(x = PC1, y = -PC2, label = shortnames),
size = 3, color = "black") +
labs(x = PC1,
y = PC2,
shape = "Depth") +
scale_colour_viridis_d() +
scale_fill_viridis_d() +
guides(colour = guide_legend(override.aes = list(shape = 15),
order = 1)) +
theme_bw() +
theme(legend.position = c(0,0),
legend.justification = c(0,0),
legend.background = element_blank(),
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10),
plot.margin = margin(5, 5, 5, 5, "pt"))
ggplot(nc$map_loaded, aes(-Axis01, Axis02)) +
geom_polygon(data = micro.hulls,
aes(colour = Treatment, fill = Treatment),
alpha = 0.1, show.legend = F) +
geom_point(size = 3, alpha = 1, aes(colour = Treatment)) +
geom_segment(data = vec.df_nc,
aes(x = 0, xend = PC1, y = 0, yend = -PC2),
arrow = arrow(length = unit(0.35, "cm")),
colour = "gray", alpha = 0.6,
inherit.aes = FALSE) +
geom_text(data = vec.df_nc,
aes(x = PC1, y = -PC2, label = shortnames),
size = 3, color = "black") +
labs(x = PC1,
y = PC2) +
scale_colour_viridis_d() +
scale_fill_viridis_d() +
guides(colour = guide_legend(override.aes = list(shape = 15),
order = 1)) +
theme_bw() +
theme(legend.position = c(0,0),
legend.justification = c(0,0),
legend.background = element_blank(),
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10),
plot.margin = margin(5, 5, 5, 5, "pt"))
ggplot(nc$map_loaded, aes(Axis01, Axis02)) +
geom_polygon(data = micro.hulls,
aes(colour = Treatment, fill = Treatment),
alpha = 0.1, show.legend = F) +
geom_point(size = 3, alpha = 1, aes(colour = Treatment)) +
geom_segment(data = vec.df_nc,
aes(x = 0, xend = PC1, y = 0, yend = -PC2),
arrow = arrow(length = unit(0.35, "cm")),
colour = "gray", alpha = 0.6,
inherit.aes = FALSE) +
geom_text(data = vec.df_nc,
aes(x = PC1, y = -PC2, label = shortnames),
size = 3, color = "black") +
labs(x = PC1,
y = PC2) +
scale_colour_viridis_d() +
scale_fill_viridis_d() +
guides(colour = guide_legend(override.aes = list(shape = 15),
order = 1)) +
theme_bw() +
theme(legend.position = c(0,0),
legend.justification = c(0,0),
legend.background = element_blank(),
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10),
plot.margin = margin(5, 5, 5, 5, "pt"))
ggplot(nc$map_loaded, aes(Axis01, Axis02)) +
geom_polygon(data = micro.hulls,
aes(colour = Treatment, fill = Treatment),
alpha = 0.1, show.legend = F) +
geom_point(size = 3, alpha = 1, aes(colour = Treatment)) +
geom_segment(data = vec.df_nc,
aes(x = 0, xend = -PC1, y = 0, yend = -PC2),
arrow = arrow(length = unit(0.35, "cm")),
colour = "gray", alpha = 0.6,
inherit.aes = FALSE) +
geom_text(data = vec.df_nc,
aes(x = PC1, y = -PC2, label = shortnames),
size = 3, color = "black") +
labs(x = PC1,
y = PC2) +
scale_colour_viridis_d() +
scale_fill_viridis_d() +
guides(colour = guide_legend(override.aes = list(shape = 15),
order = 1)) +
theme_bw() +
theme(legend.position = c(0,0),
legend.justification = c(0,0),
legend.background = element_blank(),
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10),
plot.margin = margin(5, 5, 5, 5, "pt"))
ggplot(nc$map_loaded, aes(Axis01, Axis02)) +
geom_polygon(data = micro.hulls,
aes(colour = Treatment, fill = Treatment),
alpha = 0.1, show.legend = F) +
geom_point(size = 3, alpha = 1, aes(colour = Treatment)) +
geom_segment(data = vec.df_nc,
aes(x = 0, xend = -PC1, y = 0, yend = -PC2),
arrow = arrow(length = unit(0.35, "cm")),
colour = "gray", alpha = 0.6,
inherit.aes = FALSE) +
geom_text(data = vec.df_nc,
aes(x = -PC1, y = -PC2, label = shortnames),
size = 3, color = "black") +
labs(x = PC1,
y = PC2) +
scale_colour_viridis_d() +
scale_fill_viridis_d() +
guides(colour = guide_legend(override.aes = list(shape = 15),
order = 1)) +
theme_bw() +
theme(legend.position = c(0,0),
legend.justification = c(0,0),
legend.background = element_blank(),
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10),
plot.margin = margin(5, 5, 5, 5, "pt"))
png("InitialFigs/BetaAitch_mTAG.png", width = 7, height = 5, units = "in", res = 300)
ggplot(nc$map_loaded, aes(Axis01, Axis02)) +
geom_polygon(data = micro.hulls,
aes(colour = Treatment, fill = Treatment),
alpha = 0.1, show.legend = F) +
geom_point(size = 3, alpha = 1, aes(colour = Treatment)) +
geom_segment(data = vec.df_nc,
aes(x = 0, xend = -PC1, y = 0, yend = -PC2),
arrow = arrow(length = unit(0.35, "cm")),
colour = "gray", alpha = 0.6,
inherit.aes = FALSE) +
geom_text(data = vec.df_nc,
aes(x = -PC1, y = -PC2, label = shortnames),
size = 3, color = "black") +
labs(x = PC1,
y = PC2) +
scale_colour_viridis_d() +
scale_fill_viridis_d() +
guides(colour = guide_legend(override.aes = list(shape = 15),
order = 1)) +
theme_bw() +
theme(legend.position = c(0,0),
legend.justification = c(0,0),
legend.background = element_blank(),
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 10),
plot.margin = margin(5, 5, 5, 5, "pt"))
dev.off()
