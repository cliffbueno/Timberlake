mutate(Kendallfdr = p.adjust(KendallP, method = "fdr")) %>%
mutate(PearsonPcut = factor(ifelse(Pearsonfdr < 0.05,
"Pfdr < 0.05", "Pfdr > 0.05"),
levels = c("Pfdr < 0.05","Pfdr > 0.05"))) %>%
mutate(SpearmanPcut = factor(ifelse(Spearmanfdr < 0.05,
"Pfdr < 0.05", "Pfdr > 0.05"),
levels = c("Pfdr < 0.05","Pfdr > 0.05"))) %>%
mutate(KendallPcut = factor(ifelse(Kendallfdr < 0.05,
"Pfdr < 0.05", "Pfdr > 0.05"),
levels = c("Pfdr < 0.05","Pfdr > 0.05")))
hist(map_MG_only$CH4_ug_m2_h) # Normal
hist(KO_table_VST_respM_t$K00192) # Not Normal
# Merge Ontology with Spearman correlations
cor_table <- merge(BGC_ont_colors, cor_df, by = 'KO') %>%       # merge
arrange(Index) %>% # sort by index
# Get only data, add names to rows
KO_Resp_HeatDS0 <- KO_table_VSTrespZc                   # rename
# Merge Ontology with Spearman correlations
cor_table <- merge(BGC_ont_colors, cor_df, by = 'KO') %>%       # merge
arrange(Index) %>% # sort by index
# Get only data, add names to rows
KO_Resp_HeatDS0 <- KO_table_VSTrespZc                   # rename
# Merge Ontology with Spearman correlations
cor_table <- merge(BGC_ont_colors, cor_df, by = 'KO') %>%       # merge
arrange(Index) # sort by index
View(cor_table)
cor_df <- as.data.frame(matrix(NA, ncol(KO_table_VST_respM_t), 7)) %>%
set_names(c("KO", "r", "PearsonP", "rho", "SpearmanP", "tau", "KendallP"))
for (i in 1:ncol(KO_table_VST_respM_t)) {
m <- cor.test(map_MG_only$CH4_ug_m2_h, KO_table_VST_respM_t[,i], method = "pearson", na.rm = T)
m1 <- cor.test(map_MG_only$CH4_ug_m2_h, KO_table_VST_respM_t[,i], method = "spearman", na.rm = T)
m2 <- cor.test(map_MG_only$CH4_ug_m2_h, KO_table_VST_respM_t[,i], method = "kendall", na.rm = T)
cor_df$KO[i] <- names(KO_table_VST_respM_t)[i]
cor_df$r[i] <- m$estimate
cor_df$PearsonP[i] <- m$p.value
cor_df$rho[i] <- m1$estimate
cor_df$SpearmanP[i] <- m1$p.value
cor_df$tau[i] <- m2$estimate
cor_df$KendallP[i] <- m2$p.value
}
cor_df <- cor_df %>%
mutate(Pearsonfdr = p.adjust(PearsonP, method = "fdr")) %>%
mutate(Spearmanfdr = p.adjust(SpearmanP, method = "fdr")) %>%
mutate(Kendallfdr = p.adjust(KendallP, method = "fdr")) %>%
mutate(PearsonPcut = factor(ifelse(Pearsonfdr < 0.05,
"Pfdr < 0.05", "Pfdr > 0.05"),
levels = c("Pfdr < 0.05","Pfdr > 0.05"))) %>%
mutate(SpearmanPcut = factor(ifelse(Spearmanfdr < 0.05,
"Pfdr < 0.05", "Pfdr > 0.05"),
levels = c("Pfdr < 0.05","Pfdr > 0.05"))) %>%
mutate(KendallPcut = factor(ifelse(Kendallfdr < 0.05,
"Pfdr < 0.05", "Pfdr > 0.05"),
levels = c("Pfdr < 0.05","Pfdr > 0.05"))) %>%
mutate(CH4_dir <- ifelse(rho < 0, "Negative", "Positive")) %>%
mutate(CH4_sig <- ifelse(SpearmanPcut == "Pfdr < 0.05", "Significant", "NS")) %>%
mutate(CH4_cor <- paste(CH4_dir, CH4_sig, sep = "")) %>%
mutate(CH_cor <- as.factor(CH4_cor)) %>%
mutate(CH4_cor <- recode(CH4_cor, "NegativeSignificant" = "Negative", "NegativeNSD" = "None",
"PositiveSignificant" = "Positive", "PositiveNSD" = "None"))
cor_df <- cor_df %>%
mutate(Pearsonfdr = p.adjust(PearsonP, method = "fdr")) %>%
mutate(Spearmanfdr = p.adjust(SpearmanP, method = "fdr")) %>%
mutate(Kendallfdr = p.adjust(KendallP, method = "fdr")) %>%
mutate(PearsonPcut = factor(ifelse(Pearsonfdr < 0.05,
"Pfdr < 0.05", "Pfdr > 0.05"),
levels = c("Pfdr < 0.05","Pfdr > 0.05"))) %>%
mutate(SpearmanPcut = factor(ifelse(Spearmanfdr < 0.05,
"Pfdr < 0.05", "Pfdr > 0.05"),
levels = c("Pfdr < 0.05","Pfdr > 0.05"))) %>%
mutate(KendallPcut = factor(ifelse(Kendallfdr < 0.05,
"Pfdr < 0.05", "Pfdr > 0.05"),
levels = c("Pfdr < 0.05","Pfdr > 0.05"))) %>%
mutate(CH4_dir <- ifelse(rho < 0, "Negative", "Positive"))
cor_df <- as.data.frame(matrix(NA, ncol(KO_table_VST_respM_t), 7)) %>%
set_names(c("KO", "r", "PearsonP", "rho", "SpearmanP", "tau", "KendallP"))
for (i in 1:ncol(KO_table_VST_respM_t)) {
m <- cor.test(map_MG_only$CH4_ug_m2_h, KO_table_VST_respM_t[,i], method = "pearson", na.rm = T)
m1 <- cor.test(map_MG_only$CH4_ug_m2_h, KO_table_VST_respM_t[,i], method = "spearman", na.rm = T)
m2 <- cor.test(map_MG_only$CH4_ug_m2_h, KO_table_VST_respM_t[,i], method = "kendall", na.rm = T)
cor_df$KO[i] <- names(KO_table_VST_respM_t)[i]
cor_df$r[i] <- m$estimate
cor_df$PearsonP[i] <- m$p.value
cor_df$rho[i] <- m1$estimate
cor_df$SpearmanP[i] <- m1$p.value
cor_df$tau[i] <- m2$estimate
cor_df$KendallP[i] <- m2$p.value
}
cor_df <- cor_df %>%
mutate(Pearsonfdr = p.adjust(PearsonP, method = "fdr")) %>%
mutate(Spearmanfdr = p.adjust(SpearmanP, method = "fdr")) %>%
mutate(Kendallfdr = p.adjust(KendallP, method = "fdr")) %>%
mutate(PearsonPcut = factor(ifelse(Pearsonfdr < 0.05,
"Pfdr < 0.05", "Pfdr > 0.05"),
levels = c("Pfdr < 0.05","Pfdr > 0.05"))) %>%
mutate(SpearmanPcut = factor(ifelse(Spearmanfdr < 0.05,
"Pfdr < 0.05", "Pfdr > 0.05"),
levels = c("Pfdr < 0.05","Pfdr > 0.05"))) %>%
mutate(KendallPcut = factor(ifelse(Kendallfdr < 0.05,
"Pfdr < 0.05", "Pfdr > 0.05"),
levels = c("Pfdr < 0.05","Pfdr > 0.05"))) %>%
mutate(CH4_dir <- ifelse(rho < 0, "Negative", "Positive")) %>%
mutate(CH4_sig <- ifelse(SpearmanPcut == "Pfdr < 0.05", "Significant", "NS")) %>%
mutate(CH4_cor <- paste0(CH4_dir, CH4_sig, sep = "")) %>%
mutate(CH_cor <- as.factor(CH4_cor)) %>%
mutate(CH4_cor <- recode(CH4_cor, "NegativeSignificant" = "Negative", "NegativeNSD" = "None",
"PositiveSignificant" = "Positive", "PositiveNSD" = "None"))
cor_df <- as.data.frame(matrix(NA, ncol(KO_table_VST_respM_t), 7)) %>%
set_names(c("KO", "r", "PearsonP", "rho", "SpearmanP", "tau", "KendallP"))
for (i in 1:ncol(KO_table_VST_respM_t)) {
m <- cor.test(map_MG_only$CH4_ug_m2_h, KO_table_VST_respM_t[,i], method = "pearson", na.rm = T)
m1 <- cor.test(map_MG_only$CH4_ug_m2_h, KO_table_VST_respM_t[,i], method = "spearman", na.rm = T)
m2 <- cor.test(map_MG_only$CH4_ug_m2_h, KO_table_VST_respM_t[,i], method = "kendall", na.rm = T)
cor_df$KO[i] <- names(KO_table_VST_respM_t)[i]
cor_df$r[i] <- m$estimate
cor_df$PearsonP[i] <- m$p.value
cor_df$rho[i] <- m1$estimate
cor_df$SpearmanP[i] <- m1$p.value
cor_df$tau[i] <- m2$estimate
cor_df$KendallP[i] <- m2$p.value
}
cor_df <- cor_df %>%
mutate(Pearsonfdr = p.adjust(PearsonP, method = "fdr")) %>%
mutate(Spearmanfdr = p.adjust(SpearmanP, method = "fdr")) %>%
mutate(Kendallfdr = p.adjust(KendallP, method = "fdr")) %>%
mutate(PearsonPcut = factor(ifelse(Pearsonfdr < 0.05,
"Pfdr < 0.05", "Pfdr > 0.05"),
levels = c("Pfdr < 0.05","Pfdr > 0.05"))) %>%
mutate(SpearmanPcut = factor(ifelse(Spearmanfdr < 0.05,
"Pfdr < 0.05", "Pfdr > 0.05"),
levels = c("Pfdr < 0.05","Pfdr > 0.05"))) %>%
mutate(KendallPcut = factor(ifelse(Kendallfdr < 0.05,
"Pfdr < 0.05", "Pfdr > 0.05"),
levels = c("Pfdr < 0.05","Pfdr > 0.05"))) %>%
mutate(CH4_dir <- ifelse(rho < 0, "Negative", "Positive")) %>%
mutate(CH4_sig <- ifelse(SpearmanPcut == "Pfdr < 0.05", "Significant", "NS"))
View(cor_df)
cor_df <- as.data.frame(matrix(NA, ncol(KO_table_VST_respM_t), 7)) %>%
set_names(c("KO", "r", "PearsonP", "rho", "SpearmanP", "tau", "KendallP"))
for (i in 1:ncol(KO_table_VST_respM_t)) {
m <- cor.test(map_MG_only$CH4_ug_m2_h, KO_table_VST_respM_t[,i], method = "pearson", na.rm = T)
m1 <- cor.test(map_MG_only$CH4_ug_m2_h, KO_table_VST_respM_t[,i], method = "spearman", na.rm = T)
m2 <- cor.test(map_MG_only$CH4_ug_m2_h, KO_table_VST_respM_t[,i], method = "kendall", na.rm = T)
cor_df$KO[i] <- names(KO_table_VST_respM_t)[i]
cor_df$r[i] <- m$estimate
cor_df$PearsonP[i] <- m$p.value
cor_df$rho[i] <- m1$estimate
cor_df$SpearmanP[i] <- m1$p.value
cor_df$tau[i] <- m2$estimate
cor_df$KendallP[i] <- m2$p.value
}
cor_df <- cor_df %>%
mutate(Pearsonfdr = p.adjust(PearsonP, method = "fdr")) %>%
mutate(Spearmanfdr = p.adjust(SpearmanP, method = "fdr")) %>%
mutate(Kendallfdr = p.adjust(KendallP, method = "fdr")) %>%
mutate(PearsonPcut = factor(ifelse(Pearsonfdr < 0.05,
"Pfdr < 0.05", "Pfdr > 0.05"),
levels = c("Pfdr < 0.05","Pfdr > 0.05"))) %>%
mutate(SpearmanPcut = factor(ifelse(Spearmanfdr < 0.05,
"Pfdr < 0.05", "Pfdr > 0.05"),
levels = c("Pfdr < 0.05","Pfdr > 0.05"))) %>%
mutate(KendallPcut = factor(ifelse(Kendallfdr < 0.05,
"Pfdr < 0.05", "Pfdr > 0.05"),
levels = c("Pfdr < 0.05","Pfdr > 0.05"))) %>%
mutate(CH4_dir = ifelse(rho < 0, "Negative", "Positive")) %>%
mutate(CH4_sig = ifelse(SpearmanPcut == "Pfdr < 0.05", "Significant", "NS")) %>%
mutate(CH4_cor = paste(CH4_dir, CH4_sig, sep = "")) %>%
mutate(CH_cor = as.factor(CH4_cor)) %>%
mutate(CH4_cor = recode(CH4_cor, "NegativeSignificant" = "Negative", "NegativeNSD" = "None",
"PositiveSignificant" = "Positive", "PositiveNSD" = "None"))
hist(map_MG_only$CH4_ug_m2_h) # Normal
hist(KO_table_VST_respM_t$K00192) # Not Normal
# Merge Ontology with Spearman correlations
cor_table <- merge(BGC_ont_colors, cor_df, by = 'KO') %>%       # merge
arrange(Index) # sort by index
View(cor_table)
cor_df <- as.data.frame(matrix(NA, ncol(KO_table_VST_respM_t), 7)) %>%
set_names(c("KO", "r", "PearsonP", "rho", "SpearmanP", "tau", "KendallP"))
for (i in 1:ncol(KO_table_VST_respM_t)) {
m <- cor.test(map_MG_only$CH4_ug_m2_h, KO_table_VST_respM_t[,i], method = "pearson", na.rm = T)
m1 <- cor.test(map_MG_only$CH4_ug_m2_h, KO_table_VST_respM_t[,i], method = "spearman", na.rm = T)
m2 <- cor.test(map_MG_only$CH4_ug_m2_h, KO_table_VST_respM_t[,i], method = "kendall", na.rm = T)
cor_df$KO[i] <- names(KO_table_VST_respM_t)[i]
cor_df$r[i] <- m$estimate
cor_df$PearsonP[i] <- m$p.value
cor_df$rho[i] <- m1$estimate
cor_df$SpearmanP[i] <- m1$p.value
cor_df$tau[i] <- m2$estimate
cor_df$KendallP[i] <- m2$p.value
}
cor_df <- cor_df %>%
mutate(Pearsonfdr = p.adjust(PearsonP, method = "fdr")) %>%
mutate(Spearmanfdr = p.adjust(SpearmanP, method = "fdr")) %>%
mutate(Kendallfdr = p.adjust(KendallP, method = "fdr")) %>%
mutate(PearsonPcut = factor(ifelse(Pearsonfdr < 0.05,
"Pfdr < 0.05", "Pfdr > 0.05"),
levels = c("Pfdr < 0.05","Pfdr > 0.05"))) %>%
mutate(SpearmanPcut = factor(ifelse(Spearmanfdr < 0.05,
"Pfdr < 0.05", "Pfdr > 0.05"),
levels = c("Pfdr < 0.05","Pfdr > 0.05"))) %>%
mutate(KendallPcut = factor(ifelse(Kendallfdr < 0.05,
"Pfdr < 0.05", "Pfdr > 0.05"),
levels = c("Pfdr < 0.05","Pfdr > 0.05"))) %>%
mutate(CH4_dir = ifelse(rho < 0, "Negative", "Positive")) %>%
mutate(CH4_sig = ifelse(SpearmanPcut == "Pfdr < 0.05", "Significant", "NS")) %>%
mutate(CH4_cor = paste(CH4_dir, CH4_sig, sep = "")) %>%
mutate(CH4_cor = as.factor(CH4_cor)) %>%
mutate(CH4_cor = recode(CH4_cor, "NegativeSignificant" = "Negative", "NegativeNSD" = "None",
"PositiveSignificant" = "Positive", "PositiveNSD" = "None"))
hist(map_MG_only$CH4_ug_m2_h) # Normal
hist(KO_table_VST_respM_t$K00192) # Not Normal
# Merge Ontology with Spearman correlations
cor_table <- merge(BGC_ont_colors, cor_df, by = 'KO') %>%       # merge
arrange(Index) # sort by index
View(cor_table)
cor_df <- as.data.frame(matrix(NA, ncol(KO_table_VST_respM_t), 7)) %>%
set_names(c("KO", "r", "PearsonP", "rho", "SpearmanP", "tau", "KendallP"))
for (i in 1:ncol(KO_table_VST_respM_t)) {
m <- cor.test(map_MG_only$CH4_ug_m2_h, KO_table_VST_respM_t[,i], method = "pearson", na.rm = T)
m1 <- cor.test(map_MG_only$CH4_ug_m2_h, KO_table_VST_respM_t[,i], method = "spearman", na.rm = T)
m2 <- cor.test(map_MG_only$CH4_ug_m2_h, KO_table_VST_respM_t[,i], method = "kendall", na.rm = T)
cor_df$KO[i] <- names(KO_table_VST_respM_t)[i]
cor_df$r[i] <- m$estimate
cor_df$PearsonP[i] <- m$p.value
cor_df$rho[i] <- m1$estimate
cor_df$SpearmanP[i] <- m1$p.value
cor_df$tau[i] <- m2$estimate
cor_df$KendallP[i] <- m2$p.value
}
cor_df <- cor_df %>%
mutate(Pearsonfdr = p.adjust(PearsonP, method = "fdr")) %>%
mutate(Spearmanfdr = p.adjust(SpearmanP, method = "fdr")) %>%
mutate(Kendallfdr = p.adjust(KendallP, method = "fdr")) %>%
mutate(PearsonPcut = factor(ifelse(Pearsonfdr < 0.05,
"Pfdr < 0.05", "Pfdr > 0.05"),
levels = c("Pfdr < 0.05","Pfdr > 0.05"))) %>%
mutate(SpearmanPcut = factor(ifelse(Spearmanfdr < 0.05,
"Pfdr < 0.05", "Pfdr > 0.05"),
levels = c("Pfdr < 0.05","Pfdr > 0.05"))) %>%
mutate(KendallPcut = factor(ifelse(Kendallfdr < 0.05,
"Pfdr < 0.05", "Pfdr > 0.05"),
levels = c("Pfdr < 0.05","Pfdr > 0.05"))) %>%
mutate(CH4_dir = ifelse(rho < 0, "Negative", "Positive")) %>%
mutate(CH4_sig = ifelse(SpearmanPcut == "Pfdr < 0.05", "Significant", "NS")) %>%
mutate(CH4_cor = paste(CH4_dir, CH4_sig, sep = "")) %>%
mutate(CH4_cor = as.factor(CH4_cor)) %>%
mutate(CH4_cor = recode(CH4_cor, "NegativeSignificant" = "Negative", "NegativeNS" = "None",
"PositiveSignificant" = "Positive", "PositiveNS" = "None"))
# Merge Ontology with Spearman correlations
cor_table <- merge(BGC_ont_colors, cor_df, by = 'KO') %>%       # merge
arrange(Index) # sort by index
View(cor_table)
View(cor_table)
ann_rows <- data.frame(row.names = rownames(KO_Resp_HeatDStt),
"L2" = KO_Resp_HeatDS0$L2,
"L1" = KO_Resp_HeatDS0$L1,
"CH4_cor" = cor_table$CH4_cor)
ann_colors <- list(Treatment = c(Control = "#3B528BFF",
SO4 = "#21908CFF",
`ASW-SO4` = "#5DC863FF",
ASW = "#FDE725FF"),
L1 = c(`Carbon ` = "brown",
Nitrogen = "forestgreen",
Phosphorus = "deepskyblue3",
Sulfur = "magenta",
CH4_cycling = "grey40",
Fermentation = "darkorange"),
L2 = c(Sugars = L2_cols$color[22],
Polymers = L2_cols$color[18],
Aromatic = L2_cols$color[1],
NO3_reduction = L2_cols$color[14],
NH3_oxidation = L2_cols$color[11],
`NO3_A.reduction` = L2_cols$color[13],
NH4_assimilation = L2_cols$color[12],
N2_fixation = L2_cols$color[10],
P_regulation = L2_cols$color[15],
`PolyP-ases ` = L2_cols$color[17],
Phn_transport = L2_cols$color[16],
`CH3-phosphonate` = L2_cols$color[2],
S2O3_oxidation = L2_cols$color[19],
SO4_A.reduction = L2_cols$color[20],
SO4_D.reduction = L2_cols$color[21],
CH4_oxidation = L2_cols$color[7],
CH4_H2_reduction = L2_cols$color[4],
CH4_acetate = L2_cols$color[5],
CH4_methylotroph = L2_cols$color[6],
CH4_Archaeal = L2_cols$color[3],
H2_production = L2_cols$color[9],
Fermentation = L2_cols$color[8]),
CH4_cor = c(Positive = "red", Negative = "blue", None = "grey90"))
pheatmap(KO_Resp_HeatDStt,
legend = T,
legend_breaks = c(-2, -1, 0, 1, 2, max(KO_Resp_HeatDStt)),
legend_labels = c("-2","-1","0","1","2","Abund.\n"),
main = "",
border_color = NA,
scale = "none",
angle_col = 315,
fontsize = 8,
annotation_col = ann_cols,
annotation_row = ann_rows,
annotation_colors = ann_colors,
cluster_rows = F,
cluster_cols = F,
gaps_row = c(12, 19, 25, 31, 50),
gaps_col = c(5, 10, 13))
ann_rows <- data.frame(row.names = rownames(KO_Resp_HeatDStt),
"CH4_cor" = cor_table$CH4_cor,
"L2" = KO_Resp_HeatDS0$L2,
"L1" = KO_Resp_HeatDS0$L1)
ann_colors <- list(Treatment = c(Control = "#3B528BFF",
SO4 = "#21908CFF",
`ASW-SO4` = "#5DC863FF",
ASW = "#FDE725FF"),
CH4_cor = c(Positive = "red", Negative = "blue", None = "grey90"),
L1 = c(`Carbon ` = "brown",
Nitrogen = "forestgreen",
Phosphorus = "deepskyblue3",
Sulfur = "magenta",
CH4_cycling = "grey40",
Fermentation = "darkorange"),
L2 = c(Sugars = L2_cols$color[22],
Polymers = L2_cols$color[18],
Aromatic = L2_cols$color[1],
NO3_reduction = L2_cols$color[14],
NH3_oxidation = L2_cols$color[11],
`NO3_A.reduction` = L2_cols$color[13],
NH4_assimilation = L2_cols$color[12],
N2_fixation = L2_cols$color[10],
P_regulation = L2_cols$color[15],
`PolyP-ases ` = L2_cols$color[17],
Phn_transport = L2_cols$color[16],
`CH3-phosphonate` = L2_cols$color[2],
S2O3_oxidation = L2_cols$color[19],
SO4_A.reduction = L2_cols$color[20],
SO4_D.reduction = L2_cols$color[21],
CH4_oxidation = L2_cols$color[7],
CH4_H2_reduction = L2_cols$color[4],
CH4_acetate = L2_cols$color[5],
CH4_methylotroph = L2_cols$color[6],
CH4_Archaeal = L2_cols$color[3],
H2_production = L2_cols$color[9],
Fermentation = L2_cols$color[8]))
pheatmap(KO_Resp_HeatDStt,
legend = T,
legend_breaks = c(-2, -1, 0, 1, 2, max(KO_Resp_HeatDStt)),
legend_labels = c("-2","-1","0","1","2","Abund.\n"),
main = "",
border_color = NA,
scale = "none",
angle_col = 315,
fontsize = 8,
annotation_col = ann_cols,
annotation_row = ann_rows,
annotation_colors = ann_colors,
cluster_rows = F,
cluster_cols = F,
gaps_row = c(12, 19, 25, 31, 50),
gaps_col = c(5, 10, 13))
ann_colors <- list(Treatment = c(Control = "#3B528BFF",
SO4 = "#21908CFF",
`ASW-SO4` = "#5DC863FF",
ASW = "#FDE725FF"),
CH4_cor = c(Positive = "red", Negative = "blue", None = "grey100"),
L1 = c(`Carbon ` = "brown",
Nitrogen = "forestgreen",
Phosphorus = "deepskyblue3",
Sulfur = "magenta",
CH4_cycling = "grey40",
Fermentation = "darkorange"),
L2 = c(Sugars = L2_cols$color[22],
Polymers = L2_cols$color[18],
Aromatic = L2_cols$color[1],
NO3_reduction = L2_cols$color[14],
NH3_oxidation = L2_cols$color[11],
`NO3_A.reduction` = L2_cols$color[13],
NH4_assimilation = L2_cols$color[12],
N2_fixation = L2_cols$color[10],
P_regulation = L2_cols$color[15],
`PolyP-ases ` = L2_cols$color[17],
Phn_transport = L2_cols$color[16],
`CH3-phosphonate` = L2_cols$color[2],
S2O3_oxidation = L2_cols$color[19],
SO4_A.reduction = L2_cols$color[20],
SO4_D.reduction = L2_cols$color[21],
CH4_oxidation = L2_cols$color[7],
CH4_H2_reduction = L2_cols$color[4],
CH4_acetate = L2_cols$color[5],
CH4_methylotroph = L2_cols$color[6],
CH4_Archaeal = L2_cols$color[3],
H2_production = L2_cols$color[9],
Fermentation = L2_cols$color[8]))
pheatmap(KO_Resp_HeatDStt,
legend = T,
legend_breaks = c(-2, -1, 0, 1, 2, max(KO_Resp_HeatDStt)),
legend_labels = c("-2","-1","0","1","2","Abund.\n"),
main = "",
border_color = NA,
scale = "none",
angle_col = 315,
fontsize = 8,
annotation_col = ann_cols,
annotation_row = ann_rows,
annotation_colors = ann_colors,
cluster_rows = F,
cluster_cols = F,
gaps_row = c(12, 19, 25, 31, 50),
gaps_col = c(5, 10, 13))
ann_colors <- list(Treatment = c(Control = "#3B528BFF",
SO4 = "#21908CFF",
`ASW-SO4` = "#5DC863FF",
ASW = "#FDE725FF"),
CH4_cor = c(Positive = "red", Negative = "blue", None = "grey99"),
L1 = c(`Carbon ` = "brown",
Nitrogen = "forestgreen",
Phosphorus = "deepskyblue3",
Sulfur = "magenta",
CH4_cycling = "grey40",
Fermentation = "darkorange"),
L2 = c(Sugars = L2_cols$color[22],
Polymers = L2_cols$color[18],
Aromatic = L2_cols$color[1],
NO3_reduction = L2_cols$color[14],
NH3_oxidation = L2_cols$color[11],
`NO3_A.reduction` = L2_cols$color[13],
NH4_assimilation = L2_cols$color[12],
N2_fixation = L2_cols$color[10],
P_regulation = L2_cols$color[15],
`PolyP-ases ` = L2_cols$color[17],
Phn_transport = L2_cols$color[16],
`CH3-phosphonate` = L2_cols$color[2],
S2O3_oxidation = L2_cols$color[19],
SO4_A.reduction = L2_cols$color[20],
SO4_D.reduction = L2_cols$color[21],
CH4_oxidation = L2_cols$color[7],
CH4_H2_reduction = L2_cols$color[4],
CH4_acetate = L2_cols$color[5],
CH4_methylotroph = L2_cols$color[6],
CH4_Archaeal = L2_cols$color[3],
H2_production = L2_cols$color[9],
Fermentation = L2_cols$color[8]))
Fermentation = L2_cols$color[8]))
ann_colors <- list(Treatment = c(Control = "#3B528BFF",
SO4 = "#21908CFF",
`ASW-SO4` = "#5DC863FF",
ASW = "#FDE725FF"),
CH4_cor = c(Positive = "red", Negative = "blue", None = "grey95"),
L1 = c(`Carbon ` = "brown",
Nitrogen = "forestgreen",
Phosphorus = "deepskyblue3",
Sulfur = "magenta",
CH4_cycling = "grey40",
Fermentation = "darkorange"),
L2 = c(Sugars = L2_cols$color[22],
Polymers = L2_cols$color[18],
Aromatic = L2_cols$color[1],
NO3_reduction = L2_cols$color[14],
NH3_oxidation = L2_cols$color[11],
`NO3_A.reduction` = L2_cols$color[13],
NH4_assimilation = L2_cols$color[12],
N2_fixation = L2_cols$color[10],
P_regulation = L2_cols$color[15],
`PolyP-ases ` = L2_cols$color[17],
Phn_transport = L2_cols$color[16],
`CH3-phosphonate` = L2_cols$color[2],
S2O3_oxidation = L2_cols$color[19],
SO4_A.reduction = L2_cols$color[20],
SO4_D.reduction = L2_cols$color[21],
CH4_oxidation = L2_cols$color[7],
CH4_H2_reduction = L2_cols$color[4],
CH4_acetate = L2_cols$color[5],
CH4_methylotroph = L2_cols$color[6],
CH4_Archaeal = L2_cols$color[3],
H2_production = L2_cols$color[9],
Fermentation = L2_cols$color[8]))
pheatmap(KO_Resp_HeatDStt,
legend = T,
legend_breaks = c(-2, -1, 0, 1, 2, max(KO_Resp_HeatDStt)),
legend_labels = c("-2","-1","0","1","2","Abund.\n"),
main = "",
border_color = NA,
scale = "none",
angle_col = 315,
fontsize = 8,
annotation_col = ann_cols,
annotation_row = ann_rows,
annotation_colors = ann_colors,
cluster_rows = F,
cluster_cols = F,
gaps_row = c(12, 19, 25, 31, 50),
gaps_col = c(5, 10, 13))
pheatmap(KO_Resp_HeatDStt,
legend = T,
legend_breaks = c(-2, -1, 0, 1, 2, max(KO_Resp_HeatDStt)),
legend_labels = c("-2","-1","0","1","2","Abund.\n"),
main = "",
border_color = NA,
scale = "none",
angle_col = 315,
fontsize = 8,
annotation_col = ann_cols,
annotation_row = ann_rows,
annotation_colors = ann_colors,
cluster_rows = F,
cluster_cols = F,
gaps_row = c(12, 19, 25, 31, 50),
gaps_col = c(5, 10, 13),
filename = "Figures/KO_heatmap.png",
width = 7,
height = 7)
dev.off()
dev.set(dev.next())
dev.set(dev.next())
