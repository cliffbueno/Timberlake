library(plyr) # Data manipulation
library(tidyverse) # Data manipulation
library(mctoolsr) # Microbial analyses
library(RColorBrewer) # Colors
library(vegan) # Multivariate analyses
library(indicspecies) # Indicator species
library(car) # Stats
library(FSA) # SE
library(magrittr) # Set names
library(PMCMRplus) # Stats
library(readxl) # Excel
library(writexl) # Excel
library(plotly) # Interactive plots
library(ggmap) # Maps
library(ggsn) # Maps
library(multcomp) # Tukey HSD and significance letters
library(emmeans) # Tukey HSD and significance letters
library(scales) # View colors
library(cowplot) # Multipanels
library(qvalue) # q values for indicator species
library(reshape2) # melt
library(gridExtra) # graphs
library(grid) # graphs
library(cowplot) # graphs
library(ggpubr) # graphs
library(ggExtra) # graphs
library(ggh4x) # graphs
library(dendextend) # graphs
library(corrplot) # correlation plots
library(pheatmap) # heatmaps
library(zCompositions) # CLR
library(compositions) # Aitchison
# Functions
find_hull <- function(df) df[chull(df$Axis01, df$Axis02),]
`%notin%` <- Negate(`%in%`)
# Guild subsetting module from other repo
source("~/Documents/GitHub/SF_microbe_methane/modules/3_OTU_subsetting_modules_v.0.4_strip.r")
paste_ranks = function(sm_taxa){
k = data.frame(k ="k_", sm_taxa['taxonomy1'])
k2 <- do.call(paste, c(k, sep = ""))
p = data.frame(k ="p_", sm_taxa['taxonomy2'])
p2 <- do.call(paste, c(p, sep = ""))
c = data.frame(k ="c_", sm_taxa['taxonomy3'])
c2 <- do.call(paste, c(c, sep = ""))
o = data.frame(k ="o_", sm_taxa['taxonomy4'])
o2 <- do.call(paste, c(o, sep = ""))
f = data.frame(k ="f_", sm_taxa['taxonomy5'])
f2 <- do.call(paste, c(f, sep = ""))
g = data.frame(k ="g_", sm_taxa['taxonomy6'])
g2 <- do.call(paste, c(g, sep = ""))
# NOT USING SPECIES HERE! OTU preprocessing doesn't!
s = data.frame(k ="s_", sm_taxa['taxonomy7'])
s2 <- do.call(paste, c(s, sep = ""))
# combine all
lineage_df = data.frame(k2, p2, c2, o2, f2, g2)
lineage = do.call(paste, c(lineage_df, sep = ';'))
return(lineage)
}
# Correlation functions from other repo
source("~/Documents/GitHub/EastCoast/code/meth_corr_by_taxonomy.R")
source("~/Documents/GitHub/EastCoast/code/meth_corr_by_bgc.R")
# Plotting functions from other repo
source("~/Documents/GitHub/EastCoast/code/cliffplot_taxa_bars.R")
source("~/Documents/GitHub/Extremophilic_Fungi/plot_multipatt.R")
source("~/Documents/GitHub/Extremophilic_Fungi/code/plot_multipatt.R")
# Repository path
setwd("~/Documents/GitHub/Timberlake/")
# Wyatt Hartman's guild color palette
# Note that MeOB, ANME, Anamx don't exist in this dataset, so removed
# Extra methanogen guilds added so colors added too
Guild_cols <- read.table("~/Documents/GitHub/SF_microbe_methane/data/colors/Guild_color_palette.txt",
sep='\t') %>%
dplyr::select(Guild, G_index, color) %>%
set_names(c("Guild", "Index", "color")) %>%
mutate(Index = rev(Index)) %>%
#add_row(Guild = "ANME", Index = 10, color = "#836FFF") %>%
add_row(Guild = "CH4_me", Index = 15, color = "#FDC086") %>%
add_row(Guild = "CH4_mix", Index = 16, color = "#FFFF99") %>%
filter(Guild != "MeOB") %>%
filter(Guild != "ANME") %>%
filter(Guild != "Anamx") %>%
arrange(Index)
#### _Start here ####
nc <- readRDS("data/input_filt_rare_mTAGs.rds")
nc$map_loaded <- nc$map_loaded %>%
mutate("Treatment" = c(rep("+ASW-SO4", 3),
rep("+ASW", 5),
rep("Control", 5),
rep("Field", 5),
rep("+SO4", 5))) %>%
mutate(Treatment = factor(Treatment, levels = c("Field", "Control", "+SO4", "+ASW-SO4", "+ASW")))
nc$map_loaded$sampleID <- rownames(nc$map_loaded)
nc$map_loaded$sampleID[5] <- "TL_inc_d2_ASW_2"
nc$map_loaded$sampleID[10] <- "TL_inc_d2_DI_ctrl_2"
# Fix SO4 samples according to Wyatt map
# 1,2,3,4,5 is actually 2,3,4,5A,5B
nc$map_loaded$sampleID[19:23] <- c("SO4_2", "SO4_3", "SO4_4", "SO4_5A", "SO4_5B")
rownames(nc$map_loaded)[19:23] <- c("SO4_2", "SO4_3", "SO4_4", "SO4_5A", "SO4_5B")
colnames(nc$data_loaded) <- rownames(nc$map_loaded)
# Add C, N, C:N data (was received later)
nc_cn <- read_excel("~/Documents/GitHub/EastCoast/data/Copy of CHN data.xls", sheet = 2) %>%
slice(12:91) %>%
dplyr::select(Name, `%N`, `%C`, `C:N`) %>%
mutate(Name = gsub("bottom", "bot", Name)) %>%
separate(Name, into = c("ID", "Depth"), sep = " ", remove = F) %>%
mutate(Treatment = substr(ID, start = 1, stop = 1),
Hydro = substr(ID, start = 2, stop = 2),
Replicate = substr(ID, start = 3, stop = 3)) %>%
filter(Hydro == "F") %>%
filter(Depth == "bot") %>%
mutate(Treatment = recode_factor(Treatment,
"A" = "Control",
"B" = "ASW",
"C" = "ASW_noS",
"D" = "SO4")) %>%
mutate(Treatment = factor(Treatment,
levels = c("ASW_noS", "ASW", "Control", "SO4"))) %>%
arrange(desc(Depth), Treatment) %>%
filter(Name %notin% c("CF1 bot", "CF3 bot"))
rownames(nc$map_loaded)
nc$map_loaded$sed_per_C <- NA
nc$map_loaded$sed_per_N <- NA
nc$map_loaded$sed_per_CN <- NA
nc$map_loaded$sed_per_C[1:13] <- nc_cn$`%C`[1:13]
nc$map_loaded$sed_per_C[19:23] <- nc_cn$`%C`[14:18]
nc$map_loaded$sed_per_N[1:13] <- nc_cn$`%N`[1:13]
nc$map_loaded$sed_per_N[19:23] <- nc_cn$`%N`[14:18]
nc$map_loaded$sed_per_CN[1:13] <- nc_cn$`C:N`[1:13]
nc$map_loaded$sed_per_CN[19:23] <- nc_cn$`C:N`[14:18]
nc$map_loaded <- nc$map_loaded %>%
dplyr::select(-rich, rich) %>%
dplyr::select(-shannon, shannon)
# Add +SO4 core 5 data to 5A and 5B - just depth 2 for MG!
new_dat <- read_excel("data/Soil pH-Jessie.xls", sheet = 3, na = "NA")
# rows 22, 23
# columns 3 - 17
nc$map_loaded[22, 3:17] <- new_dat[3, 2:16]
nc$map_loaded[23, 3:17] <- new_dat[4, 2:16]
#### 3. Alpha ####
leveneTest(nc$map_loaded$rich ~ nc$map_loaded$Treatment) # Homogeneous
m <- aov(rich ~ Treatment, data = nc$map_loaded)
shapiro.test(m$residuals) # Almost normal
hist(m$residuals)
summary(m)
t <- emmeans(object = m, specs = "Treatment") %>%
cld(object = ., adjust = "Tukey", Letters = letters, alpha = 0.05) %>%
mutate(name = "rich",
y = max(nc$map_loaded$rich)+(max(nc$map_loaded$rich)-min(nc$map_loaded$rich))/20)
leveneTest(nc$map_loaded$shannon ~ nc$map_loaded$Treatment) # Homogeneous
m1 <- aov(shannon ~ Treatment, data = nc$map_loaded)
shapiro.test(m1$residuals) # Almost normal
hist(m1$residuals)
summary(m1)
t1 <- emmeans(object = m1, specs = "Treatment") %>%
cld(object = ., adjust = "Tukey", Letters = letters, alpha = 0.05) %>%
mutate(name = "shannon",
y = max(nc$map_loaded$shannon)+(max(nc$map_loaded$shannon)-min(nc$map_loaded$shannon))/20)
label_df <- rbind(t, t1)
facet_df <- c("rich" = "(a) Richness",
"shannon" = "(b) Shannon")
alpha_long <- nc$map_loaded %>%
pivot_longer(cols = c("rich", "shannon"))
ggplot(alpha_long, aes(reorder(Treatment, value, mean), value,
colour = Treatment)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 2, alpha = 0.75, width = 0.2, shape = 17) +
geom_text(data = label_df, aes(Treatment, y, label = str_trim(.group)),
size = 4, color = "black") +
labs(x = "Site", y = "Number of OTUs", shape = "Depth (cm)") +
scale_colour_viridis_d() +
guides(colour = "none") +
facet_wrap(~ name, ncol = 2, scales = "free_y", labeller = as_labeller(facet_df)) +
theme_bw() +
theme(legend.position = c(1,0),
legend.justification = c(1,0),
legend.background = element_blank(),
legend.title.align = 0.5,
axis.title = element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 6),
strip.text = element_text(size = 10))
# Plot to check order. then manually order multipanel accordingly
ggplot(nc$map_loaded, aes(reorder(Treatment, rich, mean), value,
colour = Treatment)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 2, alpha = 0.75, width = 0.2, shape = 17) +
labs(x = "Site", y = "Number of OTUs", shape = "Depth (cm)") +
scale_colour_viridis_d() +
guides(colour = "none") +
theme_bw() +
theme(legend.position = c(1,0),
legend.justification = c(1,0),
legend.background = element_blank(),
legend.title.align = 0.5,
axis.title = element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 6),
strip.text = element_text(size = 10))
# Plot to check order. then manually order multipanel accordingly
ggplot(nc$map_loaded, aes(reorder(Treatment, rich, mean), rich,
colour = Treatment)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(size = 2, alpha = 0.75, width = 0.2, shape = 17) +
labs(x = "Site", y = "Number of OTUs", shape = "Depth (cm)") +
scale_colour_viridis_d() +
guides(colour = "none") +
theme_bw() +
theme(legend.position = c(1,0),
legend.justification = c(1,0),
legend.background = element_blank(),
legend.title.align = 0.5,
axis.title = element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 6),
strip.text = element_text(size = 10))
